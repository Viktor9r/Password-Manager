{"version":3,"sources":["components/Password/Password.tsx","components/AddPasswordForm/AddPasswordForm.tsx","components/UpdatePasswordForm/UpdatePasswordForm.tsx","components/PasswordsList/PasswordsList.tsx","components/Registration/Registration.tsx","components/Login/Login.tsx","App.tsx","index.tsx"],"names":["Password","password","passId","loadPasswords","useState","showPassword","setShowPassword","hideString","repeat","appPassword","length","className","application","appLogin","type","onClick","oldPasswords","JSON","parse","localStorage","getItem","console","log","listWithoutDeletedPassword","filter","oldPassword","id","setItem","stringify","removePassword","AddPasswordForm","userId","passwords","newApp","setNewApp","newLogin","setNewLogin","newPassword","setNewPassword","onSubmit","event","preventDefault","addedPassword","listWithAddedPassword","addPassword","maxId","reduce","acc","curr","b","getNewPassword","method","placeholder","onChange","target","value","required","UpdatePasswordForm","setSelectedPasswordId","listWithUpdatedPassword","map","updatePasswordInfo","PasswordsList","userLogin","passwordsList","setLoginVisible","listVisible","setVisibleList","selectedPasswordId","visiblePasswords","classNames","hidden","Registration","setShowRegistration","setIsUserReg","loadUsers","addedUser","oldUsers","some","oldUser","login","getNewUser","listWithAddedUser","hiddenPassword","listWithHiddenPassword","addUser","Login","users","selectedUserId","setSelectedUserId","setLogin","setPassword","userWelcome","setUserWelcome","showRegistration","isUserReg","loginVisible","showError","setShowError","useEffect","selUser","find","user","selectUser","name","App","setPasswords","setUsers","localUsers","localPasswords","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b4291608.chunk.js","sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useState, useEffect } from 'react';\nimport './Password.scss';\n\ntype Props = {\n  password: PasswordNew;\n  passId: number;\n  loadPasswords: () => void,\n};\n\nexport const Password: React.FC<Props> = ({\n  password,\n  passId,\n  loadPasswords,\n}) => {\n  const [showPassword, setShowPassword] = useState(false);\n  const revealPassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const hideString = '*'.repeat(password.appPassword.length);\n\n  const removePassword = () => {\n    const oldPasswords = JSON.parse(localStorage.getItem('passwordsFromServer') || '[]');\n\n    console.log(oldPasswords);\n    console.log(passId);\n    const listWithoutDeletedPassword\n    = oldPasswords.filter((oldPassword: { id: number; }) => oldPassword.id !== passId);\n\n    console.log(listWithoutDeletedPassword);\n    localStorage.setItem('passwordsFromServer', JSON.stringify(listWithoutDeletedPassword));\n    loadPasswords();\n  };\n\n  return (\n    <div className=\"password\">\n      {password.application.length > 0\n        && password.appPassword.length > 0\n        && password.appLogin.length > 0\n        ? (\n          <>\n            <div className=\"password__field password__app\">\n              Site/Application:\n              {' '}\n              {password.application}\n            </div>\n            <div className=\"password__field password__login\">\n              Login:\n              {' '}\n              {password.appLogin}\n            </div>\n            <div className=\"password__field password__pass\">\n              Password:\n              {' '}\n              {showPassword === true\n                ? (<span>{password.appPassword}</span>)\n                : (<span>{hideString}</span>)}\n            </div>\n            <div className=\"password__buttons-block\">\n              <button\n                type=\"button\"\n                className=\"pasword__delete\"\n                onClick={() => removePassword()}\n              >\n                Delete password\n              </button>\n              <button\n                type=\"button\"\n                className=\"password__button password__reveal\"\n                onClick={revealPassword}\n              >\n                Hide/Show Password\n              </button>\n            </div>\n          </>\n        )\n        : (<div className=\"password__hidden\"></div>)}\n    </div>\n  );\n};\n","/* eslint-disable no-console */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, {\n  useState,\n  useEffect,\n} from 'react';\nimport './AddPasswordForm.scss';\nimport passwordsFromServer from '../../api/passwords.json';\n\ntype Props = {\n  passwords: PasswordNew[],\n  loadPasswords: () => void,\n  userId: number,\n};\n\nexport const AddPasswordForm: React.FC<Props> = ({\n  loadPasswords,\n  userId,\n  passwords,\n}) => {\n  console.log(passwords, userId);\n  const [newApp, setNewApp] = useState('');\n  const [newLogin, setNewLogin] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n\n  const handleAppChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNewApp(event.target.value);\n  };\n\n  const handleLoginChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNewLogin(event.target.value);\n  };\n\n  const handlePasswordChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNewPassword(event.target.value);\n  };\n\n  const getNewPassword = () => {\n    const oldPasswords = JSON.parse(localStorage.getItem('passwordsFromServer') || '[]');\n\n    const maxId = oldPasswords.reduce((acc: { b: number; }, curr: { b: number; }) => (\n      acc.b > curr.b ? acc : curr\n    ));\n\n    console.log(maxId.id);\n    const addedPassword: PasswordNew = {\n      id: maxId.id + 1,\n      userId,\n      application: newApp,\n      appLogin: newLogin,\n      appPassword: newPassword,\n    };\n\n    return addedPassword;\n  };\n\n  const addPassword = (addedPassword: PasswordNew) => {\n    const oldPasswords = JSON.parse(localStorage.getItem('passwordsFromServer') || '[]');\n\n    const listWithAddedPassword = [...oldPasswords, addedPassword];\n\n    localStorage.setItem('passwordsFromServer', JSON.stringify(listWithAddedPassword));\n\n    /* setPasswords(listWithAddedPassword); */\n    console.log(oldPasswords);\n  };\n\n  const clearState = () => {\n    setNewApp('');\n    setNewLogin('');\n    setNewPassword('');\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const addedPassword = getNewPassword();\n\n    addPassword(addedPassword);\n    loadPasswords();\n    clearState();\n  };\n\n  return (\n    <div className=\"add\">\n      <form\n        className=\"add__form\"\n        onSubmit={handleSubmit}\n        method=\"post\"\n      >\n        <input\n          type=\"text\"\n          placeholder=\"Enter application title\"\n          className=\"add__input add__input--app\"\n          onChange={handleAppChange}\n          value={newApp}\n          required\n        />\n        <input\n          type=\"text\"\n          placeholder=\"Enter new login\"\n          className=\"add__input add__input--log\"\n          onChange={handleLoginChange}\n          value={newLogin}\n          required\n        />\n        <input\n          type=\"text\"\n          placeholder=\"Enter password\"\n          className=\"add__input add__input--pass\"\n          onChange={handlePasswordChange}\n          value={newPassword}\n          required\n        />\n        <button\n          className=\"add__submit\"\n          type=\"submit\"\n        >\n          Add password\n        </button>\n      </form>\n    </div>\n  );\n};\n","/* eslint-disable no-console */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, {\n  useState,\n  useEffect,\n  Dispatch,\n  SetStateAction,\n} from 'react';\nimport './UpdatePasswordForm.scss';\n\ntype Props = {\n  loadPasswords: () => void,\n  passId: number,\n  setSelectedPasswordId: Dispatch<SetStateAction<number>>,\n};\n\nexport const UpdatePasswordForm: React.FC<Props> = ({\n  loadPasswords,\n  passId,\n  setSelectedPasswordId,\n}) => {\n  const [newApp, setNewApp] = useState('');\n  const [newLogin, setNewLogin] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n\n  const clearForm = () => {\n    setNewApp('');\n    setNewLogin('');\n    setNewPassword('');\n  };\n\n  const updatePasswordInfo = () => {\n    const oldPasswords = JSON.parse(localStorage.getItem('passwordsFromServer') || '[]');\n\n    const listWithUpdatedPassword = oldPasswords.map((oldPassword: { id: number; }) => {\n      if (oldPassword.id !== passId) {\n        return oldPassword;\n      }\n\n      return {\n        ...oldPassword,\n        application: newApp,\n        appLogin: newLogin,\n        appPassword: newPassword,\n      };\n    });\n\n    localStorage.setItem('passwordsFromServer', JSON.stringify(listWithUpdatedPassword));\n  };\n\n  const handleAppChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNewApp(event.target.value);\n  };\n\n  const handleLoginChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNewLogin(event.target.value);\n  };\n\n  const handlePasswordChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNewPassword(event.target.value);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    updatePasswordInfo();\n    loadPasswords();\n\n    console.log(newApp, newLogin, newPassword);\n    clearForm();\n    setSelectedPasswordId(0);\n  };\n\n  return (\n    <div className=\"update\">\n      <form\n        className=\"update__form\"\n        onSubmit={handleSubmit}\n      >\n        <input\n          type=\"text\"\n          className=\"update__field\"\n          placeholder=\"New Site/App\"\n          value={newApp}\n          onChange={handleAppChange}\n        />\n        <input\n          type=\"text\"\n          className=\"update__field\"\n          placeholder=\"New Login\"\n          value={newLogin}\n          onChange={handleLoginChange}\n        />\n        <input\n          type=\"password\"\n          className=\"update__field\"\n          placeholder=\"New Password\"\n          value={newPassword}\n          onChange={handlePasswordChange}\n        />\n        <button\n          type=\"submit\"\n          className=\"update__button\"\n        >\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n};\n","/* eslint-disable no-console */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, {\n  Dispatch,\n  SetStateAction,\n  useState,\n} from 'react';\nimport classNames from 'classnames';\nimport './PasswordsList.scss';\nimport { Password } from '../Password/Password';\nimport { AddPasswordForm } from '../AddPasswordForm/AddPasswordForm';\nimport { UpdatePasswordForm } from '../UpdatePasswordForm/UpdatePasswordForm';\n\ntype Props = {\n  userId: number,\n  passwordsList: PasswordNew[],\n  userLogin: string,\n  loadPasswords: () => void,\n  setLoginVisible: Dispatch<SetStateAction<boolean>>,\n  listVisible: boolean,\n  setVisibleList: Dispatch<SetStateAction<boolean>>,\n};\n\nexport const PasswordsList: React.FC<Props> = ({\n  loadPasswords,\n  userLogin,\n  userId,\n  passwordsList,\n  setLoginVisible,\n  listVisible,\n  setVisibleList,\n}) => {\n  const [selectedPasswordId, setSelectedPasswordId] = useState(0);\n  const visiblePasswords = passwordsList.filter(password => password.userId === userId);\n\n  const backLogin = () => {\n    setVisibleList(false);\n    setLoginVisible(true);\n  };\n\n  return (\n    <div className=\"passwords\">\n      {visiblePasswords.length !== 0\n        ? (\n          <>\n            {listVisible && (\n              <>\n                <div className=\"passwords__title\">\n                  Welcome,\n                  {' '}\n                  {userLogin}\n                </div>\n                <AddPasswordForm\n                  passwords={visiblePasswords}\n                  loadPasswords={loadPasswords}\n                  userId={userId}\n                />\n                <button\n                  type=\"button\"\n                  className=\"password__back\"\n                  onClick={backLogin}\n                >\n                  Back to sign in\n                </button>\n                <div className=\"passwords__title-list\">Your paswords:</div>\n              </>\n            )}\n          </>\n        )\n        : ''}\n      {listVisible && (\n        <>\n          <ul className=\"passwords__list\">\n            {visiblePasswords.map(password => (\n              <li\n                key={password.id}\n                className={classNames('password__item', {\n                  hidden: password.application.length === 0\n                && password.appLogin.length === 0 && password.appPassword.length === 0,\n                })}\n              >\n                <Password\n                  password={password}\n                  passId={password.id}\n                  loadPasswords={loadPasswords}\n                />\n                {selectedPasswordId === password.id\n                  ? (\n                    <>\n                      <button\n                        type=\"button\"\n                        className=\"passwords__edit\"\n                        onClick={() => setSelectedPasswordId(0)}\n                      >\n                        Cancel\n                      </button>\n                      <UpdatePasswordForm\n                        loadPasswords={loadPasswords}\n                        passId={password.id}\n                        setSelectedPasswordId={setSelectedPasswordId}\n                      />\n                    </>\n                  )\n                  : (\n                    <>\n                      <button\n                        type=\"button\"\n                        className={classNames('password__edit', {\n                          hidden: password.application.length === 0\n                        && password.appLogin.length === 0 && password.appPassword.length === 0,\n                        })}\n                        onClick={() => setSelectedPasswordId(password.id)}\n                      >\n                        Update\n                      </button>\n                    </>\n                  )}\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\nimport React, {\n  useState,\n  useEffect,\n  Dispatch,\n  SetStateAction,\n} from 'react';\nimport './Registration.scss';\n\ntype Props = {\n  setShowRegistration: Dispatch<SetStateAction<boolean>>,\n  setIsUserReg: Dispatch<SetStateAction<boolean>>,\n  loadUsers: () => void,\n  setLoginVisible: Dispatch<SetStateAction<boolean>>,\n  loadPasswords: () => void,\n  passwords: PasswordNew[],\n};\n\nexport const Registration: React.FC<Props> = ({\n  setShowRegistration,\n  setIsUserReg,\n  loadUsers,\n  setLoginVisible,\n  loadPasswords,\n  passwords,\n}) => {\n  const [newLogin, setNewLogin] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n\n  const handleLoginChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNewLogin(event.target.value);\n  };\n\n  const handlePasswordChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNewPassword(event.target.value);\n  };\n\n  const clearForm = () => {\n    setNewLogin('');\n    setNewPassword('');\n  };\n\n  const getNewUser = () => {\n    const oldUsers = JSON.parse(localStorage.getItem('usersFromServer') || '[]');\n\n    if (oldUsers.some((oldUser: { login: string; password: string; }) => oldUser.login === newLogin\n      || oldUser.password === newPassword)) {\n      setIsUserReg(true);\n\n      return null;\n    }\n\n    const addedUser: UserNew = {\n      id: oldUsers.length + 1,\n      login: newLogin,\n      password: newPassword,\n    };\n\n    return addedUser;\n  };\n\n  const backToLogin = () => {\n    setShowRegistration(false);\n    setLoginVisible(true);\n    setIsUserReg(false);\n  };\n\n  const addUser = (addedUser: UserNew) => {\n    const oldUsers = JSON.parse(localStorage.getItem('usersFromServer') || '[]');\n\n    const listWithAddedUser = [...oldUsers, addedUser];\n\n    localStorage.setItem('usersFromServer', JSON.stringify(listWithAddedUser));\n    const maxId = passwords.reduce((acc, curr) => (\n      acc.b > curr.b ? acc : curr\n    ));\n\n    const hiddenPassword: PasswordNew = {\n      id: maxId.id + 1,\n      userId: addedUser.id,\n      application: '',\n      appLogin: '',\n      appPassword: '',\n    };\n    const listWithHiddenPassword = [...passwords, hiddenPassword];\n\n    localStorage.setItem('passwordsFromServer', JSON.stringify(listWithHiddenPassword));\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    const addedUser = getNewUser();\n\n    if (addedUser) {\n      addUser(addedUser);\n      setShowRegistration(false);\n      setLoginVisible(true);\n    } else {\n      setIsUserReg(true);\n    }\n\n    loadUsers();\n    loadPasswords();\n\n    clearForm();\n  };\n\n  return (\n    <div className=\"registration\">\n      <form\n        className=\"registration__form\"\n        onSubmit={handleSubmit}\n      >\n        <input\n          type=\"text\"\n          className=\"registration__field\"\n          placeholder=\"Login\"\n          value={newLogin}\n          onChange={handleLoginChange}\n          required\n        />\n        <input\n          type=\"text\"\n          className=\"registration__field\"\n          placeholder=\"Password\"\n          value={newPassword}\n          onChange={handlePasswordChange}\n          required\n        />\n        <button\n          type=\"submit\"\n          className=\"registration__submit\"\n        >\n          Sign Up\n        </button>\n      </form>\n      <button\n        type=\"button\"\n        className=\"registration__login\"\n        onClick={backToLogin}\n      >\n        Back to sign in\n      </button>\n    </div>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\nimport React, {\n  useState,\n  useEffect,\n  Dispatch,\n  SetStateAction,\n} from 'react';\nimport './Login.scss';\nimport { PasswordsList } from '../PasswordsList/PasswordsList';\nimport { Registration } from '../Registration/Registration';\n\ntype Props = {\n  users: UserNew[],\n  passwords: PasswordNew[],\n  loadPasswords: () => void,\n  loadUsers: () => void,\n};\n\nexport const Login: React.FC<Props> = ({\n  loadPasswords,\n  users,\n  passwords,\n  loadUsers,\n}) => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [login, setLogin] = useState('');\n  const [password, setPassword] = useState('');\n  const [userWelcome, setUserWelcome] = useState('');\n  const [showRegistration, setShowRegistration] = useState(false);\n  const [isUserReg, setIsUserReg] = useState(false);\n  const [loginVisible, setLoginVisible] = useState(true);\n  const [listVisible, setVisibleList] = useState(true);\n  const [showError, setShowError] = useState(false);\n\n  const handleLoginChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setLogin(event.target.value);\n  };\n\n  const handlePasswordChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setPassword(event.target.value);\n  };\n\n  const goToRegistration = () => {\n    setShowRegistration(true);\n    setLoginVisible(false);\n  };\n\n  const selectUser = () => {\n    const selUser = users.find(user => user.login === login && user.password === password);\n\n    if (selUser) {\n      setSelectedUserId(selUser.id);\n      setUserWelcome(selUser.login);\n      setIsUserReg(!isUserReg);\n      setShowRegistration(false);\n      setLoginVisible(false);\n      setVisibleList(true);\n      setShowError(false);\n    } else {\n      setSelectedUserId(0);\n      setShowError(true);\n    }\n\n    console.log(selUser);\n    console.log(selUser?.id);\n    console.log(selectedUserId);\n  };\n\n  useEffect(() => {\n  }, [selectedUserId]);\n\n  const clearState = () => {\n    setLogin('');\n    setPassword('');\n    /* setSelectedUserId(0); */\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    selectUser();\n    loadPasswords();\n    setIsUserReg(false);\n\n    clearState();\n  };\n\n  return (\n    <>\n      <div className=\"login\">\n        {loginVisible && (\n          <>\n            <form\n              className=\"login__form\"\n              onSubmit={handleSubmit}\n            >\n              <div className=\"login__title\">\n                Login:\n              </div>\n              <input\n                type=\"text\"\n                className=\"login__field login__field--login\"\n                placeholder=\"Enter login\"\n                required\n                name=\"Login\"\n                value={login}\n                onChange={handleLoginChange}\n              />\n              <input\n                type=\"text\"\n                className=\"login__field login__field--password\"\n                placeholder=\"Enter password\"\n                required\n                name=\"Password\"\n                value={password}\n                onChange={handlePasswordChange}\n              />\n              {showError && (\n                <>\n                  <div className=\"login__error\">\n                    Input correct values, user does not exist!\n                    Please, sign up. After sign up you will need to sign in again.\n                  </div>\n                </>\n              )}\n              <button\n                type=\"submit\"\n                className=\"login__button login__button--sign\"\n              >\n                Sign In\n              </button>\n              <button\n                type=\"button\"\n                className=\"login__button login__button--reg\"\n                onClick={goToRegistration}\n              >\n                I am a new user\n              </button>\n            </form>\n          </>\n        )}\n        {console.log(selectedUserId)}\n      </div>\n      <PasswordsList\n        userId={selectedUserId}\n        passwordsList={passwords}\n        userLogin={userWelcome}\n        loadPasswords={loadPasswords}\n        setLoginVisible={setLoginVisible}\n        listVisible={listVisible}\n        setVisibleList={setVisibleList}\n      />\n      {showRegistration\n       && (\n         <>\n           <Registration\n             setShowRegistration={setShowRegistration}\n             setIsUserReg={setIsUserReg}\n             loadUsers={loadUsers}\n             setLoginVisible={setLoginVisible}\n             loadPasswords={loadPasswords}\n             passwords={passwords}\n           />\n         </>\n       )}\n      {isUserReg && <div className=\"registration__already\">User with the same password ot login is already registered. Please, enter other data or sign in!</div>}\n\n    </>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\nimport React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport { Route, Routes } from 'react-router-dom';\nimport { Login } from './components/Login/Login';\n\nexport const App: React.FC = () => {\n  const [passwords, setPasswords] = useState<PasswordNew[]>([]);\n  const [users, setUsers] = useState<UserNew[]>([]);\n  const loadUsers = () => {\n    const localUsers = JSON.parse(localStorage.getItem('usersFromServer') || '[]');\n\n    setUsers(localUsers);\n  };\n\n  useEffect(() => {\n    loadUsers();\n  }, [setUsers]);\n\n  const loadPasswords = () => {\n    const localPasswords: PasswordNew[] = JSON.parse(localStorage.getItem('passwordsFromServer') || '[]');\n\n    setPasswords(localPasswords);\n    console.log(localPasswords);\n  };\n\n  useEffect(() => {\n    loadPasswords();\n  }, [setPasswords]);\n\n  console.log(users);\n\n  return (\n    <div className=\"page\">\n      <Login\n        users={users}\n        passwords={passwords}\n        loadPasswords={loadPasswords}\n        loadUsers={loadUsers}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { BrowserRouter } from 'react-router-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}